/*
 * Experiment to investigate effects of thread placement and communication
 * between components on performance.
 *
 * Experiment 2: 2 Clients are connected to 16 Servers with 16 channels.
 * Each client is connected to 8 servers.
 * Servers perform Read and Write operations on elements of the array.
 *
 * Copyright (c) 2013, Pavlo Bazilinskyy <pavlo.bazilinskyy@gmail.com>
 * School of Computer Science, St. Andrews University
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

type IServer is interface( in integer input )
type IClient is interface( out integer output )

component Client presents IClient {
	runTime = 100	// Amount of times behaviour is to be executed.
	count = 0		// Used to track number of times behaviour has executed.
	calcTime = 100 	// How many times a server is requested to perform computation
	
	constructor(){ }

	behaviour {
		send calcTime on output // First send an int to a server
		
		count := count + 1 // Increment a counter of executions of behaviour
		// Show percentage done: 50% - 100%
		if (count % (runTime / 2) == 0) then {		
			printInt(100 / (runTime / count))
			printString("% done.\n")
		}
		// If a limit of execution has been exceeded - stop
		if (count >= runTime) then {
			stop
		}
	}
}

component Server presents IServer {
	a = new integer[1000][5] of 0 // Array used for computations.
	runTime = 400	// Amount of times behaviour is to be executed.
	count = 0		// Used to track number of times behaviour has executed.
	
	// Increment elements of an array "num" times
	proc incrementArray(integer num) {
		for i = 0 .. num do {
			for j = 0 .. a.length-1 do {
				for k = 0 .. a[j].length-1 do {
					a[j][k] := a[j][k] + 1
				}
			}
		}
	}
	
	constructor(){ }

	behaviour {
		receive calcTime from input // First receive an int from a client
		
		// Perform calculations
		incrementArray(calcTime)
		
		count := count + 1 // Increment a counter of executions of behaviour
		// Show percentage done: 50% - 100%
		if (count % (runTime / 2) == 0) then {		
			printInt(100 / (runTime / count))
			printString("% done.\n")
		}
		// If a limit of execution has been exceeded - stop
		if (count >= runTime) then {
			stop
		}
	}
}

//Insense main
server1 = new Server()
server2 = new Server()
server3 = new Server()

client1 = new Client()
client2 = new Client()
client3 = new Client()
client4 = new Client()
client5 = new Client()
client6 = new Client()
client7 = new Client()
client8 = new Client()
client9 = new Client()
client10 = new Client()
client11 = new Client()
client12 = new Client()

// Connect clients and servers with channels.
connect client1.output to server1.input
connect client2.output to server1.input
connect client3.output to server1.input
connect client4.output to server1.input
connect client5.output to server2.input
connect client6.output to server2.input
connect client7.output to server2.input
connect client8.output to server2.input
connect client9.output to server3.input
connect client10.output to server3.input
connect client11.output to server3.input
connect client12.output to server3.input