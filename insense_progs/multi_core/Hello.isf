/*
 * Simple Hello world program that sends messages to a component that prints
 * them.
 *
 *
 * Copyright (c) 2013, Pavlo Bazilinskyy <pavlo.bazilinskyy@gmail.com>
 * School of Computer Science, St. Andrews University
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
 
 
 /**************************************
 type IHello is interface (out string output)
 type IReceiver is interface (in string input)
 
 component Hello presents IHello {
 
 	constructor() {
 	}
 	
 	behaviour {
 		send "DESEM\n" on output
 	}
 
 }
 
 component Receiver presents IReceiver {
 	
 	str = ""
 	
 	constructor() {
 	}
 	
 	behaviour {
 		receive str from input
 		printString(str)
 	}
 }
 
 component ArrayInc presents IReceiver {
 
 	a = new integer[5000][5] of 0
 	
 	str = ""
 	
 	proc incrementArr() {
 		for i = 0 .. a.length - 1 do {
 			for j = 0 .. a.length - 1 do {
 				a[i][j] := a[i][j] + 1
 			}
 		}
 	}
 	
 	constructor() {
 	}
 	
 	
 	behaviour {
 		receive str from input
 		incrementArr()
 	}
 }
 
 
 hello = new Hello()
 receiver = new Receiver()
 receiver2 = new Receiver()
 arrayInc = new ArrayInc()
 connect hello.output to receiver.input
 connect hello.output to receiver2.input
 connect hello.output to arrayInc.input
 
 **************************************/
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 /**************************************
type IHello is interface (out string output)
type IPrinter is interface (in string input)

component Hello presents IHello {
	msg = "Hello World\n"

	constructor() { }
	behaviour {
		send msg on output // Send to Printer
	}
} 

component Printer presents IPrinter {
	msg = ""

	constructor() {	}
	behaviour {
		receive msg from input // Receive from Hello
		printString(msg)
	}
} 

hello = new Hello()
printer = new Printer()
connect hello.output to printer.input
 ***************************************/