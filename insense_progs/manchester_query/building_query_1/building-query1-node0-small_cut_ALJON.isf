/*
Node 0 (Sink) Query execution plan for simple select query with a buffering factor of 3

Query finds unoccupied rooms with a high temperature

 SELECT RSTREAM Rooms.id, Rooms.temp
    FROM Rooms[NOW]
       where temp > 30
         and light < 100;
*/


// Definitions of the tuple types 
type RoomTuple is struct(integer evalEpoch; integer id ; real temp)

proc printTuple(string s; RoomTuple t; out any chan){
	send (any(s)) on chan
	send (any(" tuple: (epoch=")) on chan
	send (any(t.evalEpoch)) on chan
	send (any(", id=")) on chan
	send (any(t.id)) on chan
	send (any(", temp=")) on chan
	send (any(t.temp)) on chan
	send (any(")\n")) on chan
}


/*proc watchVar(string s; any var ; out any chan) {
	send (any(s)) on chan
	send (any("=")) on chan
	send (var) on chan
	send (any("\n")) on chan
}*/


type IReceiver is interface(in RucRadioData radioChan ; out RoomTuple pushTupleChan; 
	out byte[] radioSetNodeAddress ; out any trace);


component Receiver presents IReceiver {
	
	nodeAddr = new byte[2] of #0
	firstRun = true	
	
	constructor(){
		nodeAddr[0]:=#138
		nodeAddr[1]:=#0
	}
	
	behaviour{
		if firstRun then{
			send nodeAddr on radioSetNodeAddress
			firstRun := false
		}
		//roomTupleToSend = new RoomTuple(0, 0, 0.0) // no need for this can decl initialised to val in project
		receive radioPacket from radioChan
		
		payload = radioPacket.payload
		project payload as val onto
			RoomTuple : {
				roomTupleToSend = val 
				//printTuple("received packet containing", roomTupleToSend, trace)
				send roomTupleToSend on pushTupleChan
			} default : {

			}
	}
}

proc getBaseEpochPos (integer tupleBaseEpoch; integer minEpoch; integer bufferingFactor; 
		integer minEpochPos; integer numAgendaEvalsToBuffer) : integer {
	tupleBaseEpochPos = 
		(((tupleBaseEpoch - minEpoch) / bufferingFactor) + minEpochPos) % numAgendaEvalsToBuffer
	return tupleBaseEpochPos
}	

		
// The RoomBuffer component is responsible for buffering and sending buffered data to the Deliver component. 

type IRoomBuffer is interface (in RoomTuple receiveTupleChan; out RoomTuple pushTupleChan;  
	out any trace);

component RoomBuffer presents IRoomBuffer {

	/* Sends tuples for buffer for particular epoch identified by baseEpochPos and epochOffset.
	 * If a nullTuple or missingTuple notification is received, this is forwarded.
	 * If not all tuples have been accounted for, a MissingTuple notification is generated.
	 */
	proc sendEpochTuplesFromBuffer(integer baseEpochPos ; integer baseEpoch ; integer epochOffset ; 
		RoomTuple[][][] buffer ; integer[][] dataTupleCount ; integer streamMaxCardinality ; 
		out RoomTuple pushTupleChan) {  
	
		//send tuples which have been received for this epoch
		numTuples = dataTupleCount[baseEpochPos][epochOffset]
        //dataTuple = new RoomTuple(0, 0, 0.0) // no need, same as above
		for subStreamCount = 0 .. (numTuples-1) : 1 do {
			dataTuple = buffer[baseEpochPos][epochOffset][subStreamCount]
			send dataTuple on pushTupleChan
			//printTuple("Buffer send to deliver", tupleToSend, trace)
		}
		
		//reset the index arrays for this epoch
		dataTupleCount[baseEpochPos][epochOffset] := 0;
	}

	
	/* 
	 * Checks the baseEpoch of an incoming data tuple / null tuple / missing tuple.  There are three 
	 * possible cases:
	 * 1. If from an older epoch than the minEpoch, the tuple is discarded because it should have already 
	 * been reported as missing.  The minEpoch remains unchanged.
	 * 2. If the baseEpoch of the incoming data tuple is greater than maxEpoch (the highest epoch being stored in the 
	 * buffer), old tuples are flushed out and any which have not been accounted for are reported as missing.
	 * The minEpoch is then increased accordingly. 
	 * 3. If the baseEpoch is within the range of the buffer, no action is required, and the minEpoch
	 * remains unchanged. 
	 * 
	 * */
	proc baseEpochCheckAndFlushBuffer(integer minEpoch ; integer minEpochPos ; integer tupleBaseEpoch ; RoomTuple[][][] buffer ; 
			RoomTuple tuple ; integer[][] dataTupleCount ; integer streamMaxCardinality ; out RoomTuple pushTupleChan ; 
			integer numAgendaEvalsToBuffer ; integer bufferingFactor) : integer {
	
		//the highest epoch which currently fits in the buffer
		maxEpoch = minEpoch + (numAgendaEvalsToBuffer * bufferingFactor) - 1
		
		if tupleBaseEpoch < minEpoch then {
			//old tuple received
			printTuple("Tuple from older epoch discarded in RoomBuffer ", tuple, trace);
			
		} else if tupleBaseEpoch > maxEpoch then {
			
			send any("Tuple from newer epoch received, need to flush buffer\n") on trace
			//watchVar("baseEpochCheckAndFlushBuffer maxEpoch", any(maxEpoch), trace)
			//watchVar("baseEpochCheckAndFlushBuffer tupleBaseEpoch", any(tupleBaseEpoch), trace)
			
			// If a tuple arrives which is too new to fit in buffer, need to flush out the old 
			// tuples even if not all tuples have been accounted for
			// send everything from minEpoch to
			deliverUntilEpoch = tupleBaseEpoch - ((numAgendaEvalsToBuffer - 1) * bufferingFactor) - 1
			//watchVar("deliverUntilEpoch", any(deliverUntilEpoch), trace)
			for tmpEpoch = minEpoch .. deliverUntilEpoch do {
				tmpBaseEpoch = (tmpEpoch / bufferingFactor) * bufferingFactor;
				tmpBaseEpochPos = getBaseEpochPos(tmpBaseEpoch, minEpoch, bufferingFactor, 
						minEpochPos, numAgendaEvalsToBuffer) 
				tmpEpochOffset = tmpEpoch % bufferingFactor;

				//watchVar("baseEpochCheckAndFlushBuffer tmpEpoch", any(tmpEpoch), trace)
				//watchVar("baseEpochCheckAndFlushBuffer tmpBaseEpoch", any(tmpBaseEpoch), trace)
				//watchVar("baseEpochCheckAndFlushBuffer tmpEpochOffset", any(tmpEpochOffset), trace)
				
				sendEpochTuplesFromBuffer(tmpBaseEpochPos, tmpBaseEpoch, tmpEpochOffset, 
				buffer, dataTupleCount, streamMaxCardinality, pushTupleChan)
			}
			
			minEpoch := deliverUntilEpoch + 1 
		}
		//watchVar("minEpoch", any(minEpoch), trace)
		return minEpoch;
	}


	/*
	 * Checks whether all tuples have been accounted for in this epoch.
	 */
	proc checkAllTuplesAccountedFor(integer bufferingFactor ; integer tupleBaseEpochPos ; integer[][] dataTupleCount ; 
			integer streamMaxCardinality) : bool {
		allTuplesAccountedFor = true;
		for epochCount = 0 .. (bufferingFactor - 1) do {
			if dataTupleCount[tupleBaseEpochPos][epochCount] < streamMaxCardinality then { 
				allTuplesAccountedFor := false;
			}
		}
		return allTuplesAccountedFor;
	}

	
	/* Query-plan dependent constants*/
	numAgendaEvalsToBuffer = 4						//inter-agenda evaluation buffering
	bufferingFactor = 3								//intra-agenda evaluation buffering
	streamMaxCardinality = 2						//the cardinality of the stream (per-epoch)
	
	dummyTuple = new RoomTuple(0, 0, 0.0)		    //just for padding purposes
	
	/* The main buffer which holds the tuples */
	buffer = new RoomTuple[4][3][2] of dummyTuple;  //[x][y][z] where 
													//x=agenda_evals_to_buffer (circular list)
													//y=buffering factor 
													//z=num sub-streams

	minEpoch = 0   			// lowest epoch number of tuples in this buffer  
	minEpochPos = 0			// the position of the minEpoch in the first dimension of buffer
							// this is implemented as a circular list to avoid copying tuples

	dataTupleCount = new integer[4][3] of 0  		// the number of result tuples containing data which have been
													// received for an epoch.  Also denotes the position in the
													// buffer array where next tuple for the epoch should be placed.
	
	constructor() {
	}
	
	behaviour{
		tupleBaseEpoch = -1			// the first epoch in the agenda evaluation that the tuple was acquired in
		tupleEpochOffset = -1    	// the epoch number in the agenda evaluation that the tuple was acquired in
		tupleBaseEpochPos = -1		// the position in the circular list which corresponds to this tupleBaseEpoch
		oldMinEpoch = minEpoch		// used for comparison in case the minEpoch is changed
		
		receive tuple from receiveTupleChan
		
		tupleBaseEpoch := (tuple.evalEpoch / bufferingFactor) * bufferingFactor
		
		//check for if epoch is too old/too new, flush out tuples if necessary 
		minEpoch := baseEpochCheckAndFlushBuffer(minEpoch, minEpochPos, tupleBaseEpoch, buffer, tuple, dataTupleCount, 
				streamMaxCardinality, pushTupleChan, numAgendaEvalsToBuffer, bufferingFactor)
		//if minEpoch changes, need to change minEpochPos as well!
		minEpochPos := (minEpochPos + ((minEpoch - oldMinEpoch) / bufferingFactor)) % numAgendaEvalsToBuffer
				
		//add the tuple to the buffer
		if tuple.evalEpoch >= minEpoch then {
			tupleEpochOffset := tuple.evalEpoch % bufferingFactor;
			tupleBaseEpochPos := getBaseEpochPos(tupleBaseEpoch, minEpoch, bufferingFactor, minEpochPos, numAgendaEvalsToBuffer) 
			// refactored
			count = dataTupleCount[tupleBaseEpochPos][tupleEpochOffset]
			buffer[tupleBaseEpochPos][tupleEpochOffset][count] := tuple;
			dataTupleCount[tupleBaseEpochPos][tupleEpochOffset] := count + 1;

			allTuplesAccountedFor = checkAllTuplesAccountedFor(bufferingFactor, tupleBaseEpochPos, dataTupleCount, 
					streamMaxCardinality)
					
			if allTuplesAccountedFor then {
				for epochCount2 = 0 .. (bufferingFactor - 1) do {
					sendEpochTuplesFromBuffer(minEpochPos, minEpoch, epochCount2, 
							buffer, dataTupleCount, streamMaxCardinality, pushTupleChan)				
				}
				minEpoch := minEpoch + bufferingFactor; //increase base epoch by buffering factor
				minEpochPos := (minEpochPos + 1) % numAgendaEvalsToBuffer;
			}
		}
	}
}


type IDeliver is interface(in RoomTuple receiveTupleChan; out any output);

component Deliver presents IDeliver {

	constructor() {	
	}
		
	behaviour {
	    // to fix CGEN error declare a join tuple outside select to force inclusion of header
		select {
			receive dataTuple from receiveTupleChan : {
				printTuple("DELIVER:", dataTuple, output)
			}
		}
	}
}


//components

receiver = new Receiver()
roomBuffer = new RoomBuffer()
deliver = new Deliver()

//connecting components
connect receiver.radioChan to rucRadioIn.iochannel
connect receiver.radioSetNodeAddress to rucRadio.setNodeAddress
connect receiver.pushTupleChan to roomBuffer.receiveTupleChan
connect receiver.trace to standardOut

connect roomBuffer.pushTupleChan to deliver.receiveTupleChan
connect roomBuffer.trace to standardOut

connect deliver.output to standardOut



