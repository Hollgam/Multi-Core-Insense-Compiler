// Simple Hello World Insense program

// some procedures available to all components

proc printInt (integer number; out any outChan) {
	send(any(number)) on outChan
}
	


// Interface for Hello component
type IHello is interface ( out any output )

// Hello World component
component Hello presents IHello {

	count = 1
	test = 0

	proc printString(string str; out any outChan) { 
		send(any(str)) on outChan
	}
		
	
	proc incCount(integer by) {
		count := count + by
	}
	
	proc printHello (integer number) {
		printString("\nHello World ", output)
		printInt(number, output)
		printString(" ", output)
	}
	
	proc same (integer number) : integer {
		return number
	}
	
	proc incsum (integer num1, num2) : integer {
		num1 := num1 + 1
		num2 := num2 + 1
		return num1 + num2
	}
	
	proc neg (integer number) : integer {
		//return (-number) // unary minus doesn't appear to work see below as well
		number := 0 - number
		return number
	}
	
	proc double (integer number) : integer {
		return 2*number
	}
	
	proc doubleNeg(integer number) : integer {
		return double(neg(number))
	}
	
	constructor(){
	}
	
	constructor(integer init) {
		count := init
	}
			
	behaviour {
		printHello(count)
		// issue below: last +1 expands to ++1 (why?)
		//test := 1+1+1
		// issue below: unary minus doesn't apear to work as desired
		//test := -test
		test := incsum(count, double(count)) + 2
		printHello(test)
		printString("\n double(same(neg(count)))=", output)
		printInt(double(same(neg(count))), output)
		printString("\n same(doubleNeg(count))  =", output)
		printInt(same(doubleNeg(count)), output)
		incCount(1)
	}	
} 

hello = new Hello(20)
connect hello.output to standardOut
