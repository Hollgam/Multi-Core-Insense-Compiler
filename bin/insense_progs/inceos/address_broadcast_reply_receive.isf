// Simple Insense program that broadcasts its node address in a data packet to other nodes

type MyPacket is struct (unsigned addr ; unsigned data)

// Interface for Broadcaster
type IBroadcast is interface (
		in bool ticks ;
		out any broadcastSend ;
		in RadioPacket radioReceive
)

proc printMyPacket(MyPacket p){
	printString("(")
	printUnsignedInt(p.addr)
	printString(", ")
	printUnsignedInt(p.data)
	printString(")")
}

// Broadcaster component
component Broadcast presents IBroadcast {
	
	count = $0
	thisNodeAddr = $0
	
	proc broadcastPacket(){
		myPacket = new MyPacket(thisNodeAddr, count)
		printUnsignedInt(thisNodeAddr)
		printString(": broadcasting packet ")
		printMyPacket(myPacket)
		printString("\n")
		send any(myPacket) on broadcastSend
		count := count + $1
	}
	
	proc processIncomingPacket(RadioPacket packet){
		printUnsignedInt(thisNodeAddr)
		printString(": got packet from node ")
		printUnsignedInt(packet.addr)
		printString(" with data ")
		project packet.payload as value onto
			MyPacket: { printMyPacket( value ) }
			default : { printString( "???" ) }
		printString("\n")
	}
	
	constructor() {
		thisNodeAddr := getNodeAddress()
	}
	
	behaviour {
		select {
			receive tick from ticks : { 
				broadcastPacket() 
			}
			receive packet from radioReceive : {
				processIncomingPacket(packet)
			}
		}
	}
} 

bc = new Broadcast()

connect bc.broadcastSend to radio.broadcastSend
connect bc.radioReceive to radio.received
setTimer(bc.ticks, 10.0, true)
